I was setting up build scripts to homebrew for platforms
This is just those scripts all in one as I think having it around for possible future use could be good
But at this time I do not plan to use them


// GBA Setup from Devkit Pro 
set COMP=%DEV_KIT_PRO_ROOT%\devkitARM\bin\arm-none-eabi-gcc
set ARCH=-mthumb -mthumb-interwork
set FLAG=-g -Wall -O2 -mcpu=arm7tdmi -mtune=arm7tdmi
set INCL=-I%DEV_KIT_PRO_ROOT%\libtonc\include -I%DEV_KIT_PRO_ROOT%\libgba\include -Inl_lib -Iprojects/%1
set LIBS=-L%DEV_KIT_PRO_ROOT%\libtonc\lib -L%DEV_KIT_PRO_ROOT%\libgba\lib -lmm -ltonc
set SPEC=-specs=gba.specs
set DEFS=-D__GBA__
set OUTPUT=_build\gba

%COMP% %FLAG% %ARCH% %DEFS% %INCL% -c nl_lib\build_nl_lib.c -o %OUTPUT%\nl_lib.o
%COMP% %FLAG% %ARCH% %DEFS% %INCL% -c projects/%1/%1.c -o %OUTPUT%\%1.o
%COMP% %FLAG% %ARCH% %DEFS% %INCL% -c projects/main/main.c -o %OUTPUT%\main.o
%COMP% -g %ARCH% -Wl,-Map,%OUTPUT%\%1.map %SPEC% %OUTPUT%\nl_lib.o %OUTPUT%\%1.o %OUTPUT%\main.o %LIBS% -o %OUTPUT%\%1.elf
%DEV_KIT_PRO_ROOT%\devkitARM\bin\arm-none-eabi-objcopy -O binary %OUTPUT%\%1.elf %OUTPUT%\%1.gba
%DEV_KIT_PRO_ROOT%\tools\bin\gbafix.exe %OUTPUT%\%1.gba -thello -c0000 -m00


// GCN Setup from Devkit pro
set GCN_COMPILER= %DEV_KIT_PRO_ROOT%\devkitPPC\bin\powerpc-eabi-gcc-14.2.0
set GCN_INCLUDES= -I%DEV_KIT_PRO_ROOT%\libogc\include
set GCN_LIBS= -L%DEV_KIT_PRO_ROOT%\libogc\lib\cube -logc -lm -lgxflux
set GCN_FLAGS= -mogc -mcpu=750 -meabi -mhard-float 
set DEFINES=-DGEKKO -DGCN_GEKKO
set includes=-Inl_lib
set flags=-Wall -Wextra -g -O2
set output=_build/gcn/
set files=projects/%1/ex%1.c

%GCN_COMPILER% %DEFINES% %files% %GCN_INCLUDES% %GCN_LIBS% %includes% %GCN_FLAGS% %flags% -o%output%nl_lib.elf
%DEV_KIT_PRO_ROOT%\tools\bin\elf2dol %output%nl_lib.elf %output%game.dol

//WII setup from DEV_KIT_PRO_ROOT
set WII_COMPILER= %DEV_KIT_PRO_ROOT%\devkitPPC\bin\powerpc-eabi-gcc-14.2.0
set WII_INCLUDES= -I%DEV_KIT_PRO_ROOT%\libogc\include
set WII_LIBS= -L%DEV_KIT_PRO_ROOT%\libogc\lib\wii -lwiiuse -lbte -logc -lm
set WII_FLAGS= -mrvl -mcpu=750 -meabi -mhard-float
set DEFINES=-DGEKKO -DWII_GEKKO

set includes=-Inl_lib -Iprojects/%1
set flags=-Wall -Wextra -g -O2
set output=_build/wii/
set files=nl_lib/build_nl_lib.c projects/main/main.c projects/%1/%1.c

%WII_COMPILER% %DEFINES% %files% %WII_INCLUDES% %WII_LIBS% %includes% %WII_FLAGS% %flags% -o%output%nl_lib.elf
%DEV_KIT_PRO_ROOT%\tools\bin\elf2dol %output%nl_lib.elf %output%game.dol


// N64 Based on https://n64squid.com/homebrew/n64-sdk/ dev setup 
:: This is to compile on the secondary laptop. Must be called from legacy OS
set ROOT=c:\ultra
set gccdir=c:\ultra\gcc
set n64align=on
set GCC_CELF=on
set gccsw=-mips3 -mfp32 -funsigned-char -D_LANUAGE_C -D_ULTRA64 -D__EXTENSIONS__
::make

set DEFINES=-DNU_DEBUG -DF3DEX_GBI_2 -_MIPS_SZLONG=32 -D_MIPS_SZINT=32
set INCLUDES=-I. -Ic:\nintendo\n64kit\nusys\include -Ic:\ultra\usr\include\PR
set LIBS=-Lc:\nintendo\n64kit\nusys\lib -Lc:\ultra\usr\lib -Lc:\u;tra\gcc\mipse\lib -lnusys_d -lgultra_d -lkmc


// NDS Setup for devkit pro
set COMPILER=%DEV_KIT_PRO_ROOT%\devkitARM\bin\arm-none-eabi-g++
set ARCH=-march=armv5te -mtune=arm946e-s -mthumb 
set DEFINES= -D__NDS__ -DARM9 
set FLAGS=-g -Wall -O2 -ffunction-sections -fdata-sections %arch%

set INCLUDES= -I%DEV_KIT_PRO_ROOT%\libnds\include -I%DEV_KIT_PRO_ROOT%\calico\include
set LIBS=-L%DEV_KIT_PRO_ROOT%\libnds\lib -L%DEV_KIT_PRO_ROOT%\calico\lib -ldswifi9 -lfat -lmm9 -lnds9 -lcalico_ds9 

set CODE=%DEV_KIT_PRO_ROOT%\examples\nds\Graphics\Printing\print_both_screens\source\template.c
set icon=%DEV_KIT_PRO_ROOT%\calico\share\nds-icon.bmp
set arm7elf=-7 %DEV_KIT_PRO_ROOT%\calico\bin\ds7_maine.elf

%COMPILER% %DEFINES% %FLAGS% %INCLUDES% -c %CODE% -o %OUTDIR%nl_lib.o
%COMPILER% %ARCH% -specs=%DEV_KIT_PRO_ROOT%\calico\share\ds9.specs -g  %OUTDIR%nl_lib.o %LIBS% -o %OUTDIR%nl_lib.elf
%DEV_KIT_PRO_ROOT%\tools\bin\ndstool -c  %OUTDIR%game.nds -9  %OUTDIR%nl_lib.elf %arm7elf% -b %icon% "Test;A Test;Working?" 


// Switch - Incomplete setup from devkit pro
set COMPILER=%DEV_KIT_PRO_ROOT%\devkitA64\bin\aarch64-none-elf-g++
set FLAGS=-g -Wall -O2 -ffunction-sections
set ARCH=-march=armv8-a+crc+crypto -mtune-cortex-a57 -mtp=soft -fPIE
set INCLUDE=-I%DEV_KIT_PRO_ROOT%\libnx\include -I%DEV_KIT_PRO_ROOT%\portlibs/switch/include
set DEFINES=-D__SWITCH__
set CXX_FLAGS=-fno-rtti -fno-exceptions 
set files=

%COMPILER% %FLAGS% %ARCH% %INCLUDE% %DEFINES% %CXX_FLAGS% -c   %files%   -o file.o


//PSX dev setup
:: Will be running this from an already setup shell on another machine.
:: There is no real setup required as that shell script, PSPATHS does it for me.

set FLAGS=-Wall -g -O3
set OUTPUT=_build\psx
set INCLUDES=-Inl_lib -Iprojects/%1
set FILES=nl_lib/build_nl_lib.c projects/main/main.c
set DEFINES=-D__PSX__

set COMPILE_LINE=%FLAGS% -Xo$80010000 %INCLUDES% %DEFINES% %FILES% projects\%1\%1.c 

IF NOT EXIST %OUTPUT%/NUL mkdir %OUTPUT%
@echo on

:: NA
ccpsx -DNTSCVIDEOMODE=1 %COMPILE_LINE% -o%OUTPUT%\psNA.cpe,%OUTPUT%\psNA.sym,%OUTPUT%\psNA.map && cpe2x /ca %OUTPUT%\psNA.cpe  

:: EU
::ccpsx -DPALVIDEOMODE=1 %COMPILE_LINE% -o%OUTPUT%\psEU.cpe,%OUTPUT%\psEU.sym,%OUTPUT%\psEU.map && cpe2x /ce %OUTPUT%\psEU.cpe

:: JP
::cpe2x /cj %OUTPUT%\psJP.cpe
@echo off

